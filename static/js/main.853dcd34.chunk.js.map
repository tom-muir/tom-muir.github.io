{"version":3,"sources":["components/Profile.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["Title","props","scrollPosition","pagePosition","y","className","isMobile","dangerouslySetInnerHTML","__html","rel","target","href","Profile","src","alt","height","width","Home","ref","useRef","position","useScrollPosition","current","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8TAOA,IAEMA,EAAQ,SAACC,GACb,IAAMC,EAAiBD,EAAME,aAAaC,EAE1C,OACA,yBAAKC,UAAU,SACb,wBAAIA,UAAU,QAAd,YACCH,EARoB,MAQkBI,YAAY,yBAAKD,UAAU,SAASE,wBAVxC,CAACC,OAAQ,mCAW5C,wBAAIH,UAAU,SAAQ,uBAAGI,IAAI,sBAAsBC,OAAO,SAAUC,KAAK,+BAAnD,UAAtB,MAAoH,uBAAGF,IAAI,sBAAsBC,OAAO,SAASC,KAAK,sDAAlD,eAI3GC,EAAU,SAACX,GAAD,OACrB,oCACE,kBAAC,EAAD,CAAOE,aAAcF,EAAME,eAC3B,yBAAKU,IAAI,oBAAoBC,IAAI,UAAUC,OAAO,MAAMC,MAAM,QAC9D,yEACA,4CACA,4BACE,8GAIA,4HCvBOC,G,MAAO,WAClB,IAAMC,EAAMC,mBACNC,EAAWC,YAAkBH,EAAII,SAEvC,OACE,oCACE,yBAAKJ,IAAKA,EAAKb,UAAU,QACrBC,YACA,6BAASD,UAAU,WAErB,6BAASA,UAAU,WACjB,kBAAC,EAAD,CAASF,aAAciB,SCPlBG,MAPf,WAEE,OACM,kBAAC,EAAD,OCIYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.853dcd34.chunk.js","sourcesContent":["import React from 'react';\nimport { isMobile } from \"react-device-detect\";\n\nimport \"./Profile.css\";\n\nfunction createScrollMessage() {return {__html: 'Scroll for more </br> &#8964;'}};\n\nconst PROFILE_POSITION = 500;\n\nconst Title = (props) => {\n  const scrollPosition = props.pagePosition.y;\n\n  return (\n  <div className='title'>\n    <h2 className='name'>Tom Muir</h2>\n    {scrollPosition < PROFILE_POSITION && !isMobile && <div className='scroll' dangerouslySetInnerHTML={createScrollMessage()}/>}\n    <h2 className='links'><a rel=\"noopener noreferrer\" target=\"_blank\"  href=\"https://github.com/tom-muir\">Github</a> - <a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://www.linkedin.com/in/thomas-muir-468ba5145/\">LinkedIn</a></h2>\n  </div>\n)};\n\nexport const Profile = (props) => (\n  <>\n    <Title pagePosition={props.pagePosition}/>\n    <img src=\"profile_image.jpg\" alt=\"my face\" height=\"100\" width=\"100\" />\n    <p>Computer Science graduate and 3D designer.</p>\n    <h4>Main things:</h4>\n    <ul>\n      <li>\n        - Graduated from Durham University with First Class Honors in Computer\n        Science\n      </li>\n      <li>\n        - Worked part time as a 3D visualiser in the high-end jewellery industry\n        for over 5 years\n      </li>\n    </ul>\n  </>\n);\n","import React, { useRef } from 'react';\nimport { useScrollPosition } from '@huse/scroll-position';\nimport { isMobile } from \"react-device-detect\";\n\nimport { Profile } from \"./Profile\";\n\nimport \"./Home.css\";\n\nexport const Home = () => {\n  const ref = useRef();\n  const position = useScrollPosition(ref.current);\n\n  return (\n    <>\n      <div ref={ref} className=\"top\">\n        {!isMobile &&\n          <section className=\"header\"/>\n        }\n        <section className=\"content\">\n          <Profile pagePosition={position} />\n        </section>\n      </div>\n    </>\n  )};\n","import React from 'react';\n\nimport './App.css';\nimport { Home } from './components/Home';\n\nfunction App() {\n\n  return (\n        <Home/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}